lexik_jwt_authentication:
    secret_key: '%env(resolve:JWT_SECRET_KEY)%'
    public_key: '%env(resolve:JWT_PUBLIC_KEY)%'
    pass_phrase: '%env(JWT_PASSPHRASE)%'
    token_ttl: 21600
#    user_identity_field: username # key under which the user identity will be stored in the token payload
#    clock_skew: 0
#    allow_no_expiration: false # set to true to allow tokens without exp claim

    # token encoding/decoding settings
    encoder:
        # token encoder/decoder service - default implementation based on the lcobucci/jwt library
        service: lexik_jwt_authentication.encoder.lcobucci

        # encryption algorithm used by the encoder service
        signature_algorithm: RS256

    api_platform:
        check_path: /login_check
        username_path: username
        password_path: password

        # token extraction settings
    token_extractors:
        # look for a token as Authorization Header
        authorization_header:
            enabled: true
            prefix: Bearer
            name: Authorization

        # check token in a cookie
        cookie:
            enabled: false
#            name: '%env(AUTH_COOKIE_NAME)%'
            name: 'devis_cookie'

        # check token in query string parameter
        query_parameter:
            enabled: false
            name: bearer

        # check token in a cookie
        split_cookie:
            enabled: false
            cookies:
                - jwt_hp
                - jwt_s

    set_cookies:
        jwt_hp:
            lifetime: null
            samesite: strict
            path: /
            domain: null
            httpOnly: false
            partitioned: false # Only for Symfony 6.4 or higher
            split:
                - header
                - payload

        jwt_s:
            lifetime: 604800 #1 semaine
            samesite: strict
            path: /
            domain: null
            httpOnly: true
            partitioned: false # Only for Symfony 6.4 or higher
            split:
                - signature

    # remove the token from the response body when using cookies
    remove_token_from_body_when_cookies_used: false

    # invalidate the token on logout by storing it in the cache
    blocklist_token:
        enabled: true
        cache: cache.app